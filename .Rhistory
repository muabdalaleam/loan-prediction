#  theme(legend.position = "none")
# Display the plot
print(plot)
df <- read.csv("../data-cleaning/cleaned-data/movies-data.csv")
cat("R version:", R.version$version.string, "\n")
cat("Platform:",  R.version$platform, "\n")
df <- select(df, popularity, budget, revenue, runtime, rating)
df <- sample(df, 5)
df <- melt(df)
df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
#plot <- ggplot(df, aes(x = 1, y = 1, fill = budget)) +
#  geom_tile() +
#  scale_fill_gradientn(colours = COLORS[1]) +
#  theme_void() +
#  theme(legend.position = "none")
# Display the plot
df
df <- read.csv("../data-cleaning/cleaned-data/movies-data.csv")
cat("R version:", R.version$version.string, "\n")
cat("Platform:",  R.version$platform, "\n")
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(df))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(select(df, popularity, budget,
revenue, runtime, rating)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(select(df, popularity)))
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(select(df, popularity, budget)))
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(select(df, popularity, budget,
revenue, runtime, rating)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(select(df, popularity, budget,
revenue, runtime, rating)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(select(df, popularity, budget,
revenue, runtim)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(select(df, popularity, budget,
revenue, runtime)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(select(df, popularity, budget, revenue)))
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(sapmple(
select(df, popularity, budget, revenue), 5))
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(sample(
select(df, popularity, budget, revenue), 5))
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(sample(df, 5))
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(sample(
select(df, popularity, budget, revenue), 5)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(sample(
select(df, popularity, budget, revenue), 5, replace= TRUE)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(sample(
select(df, popularity, budget), 5, replace= TRUE)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(sample(
select(df), 5, replace= TRUE)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(sample(
df, 5, replace= TRUE)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(sample(
select(df, popularity, budget), 5, replace= TRUE)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(unlist(sample(
select(df, popularity, budget), 5, replace= TRUE))))
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(unlist(sample(
select(df), 5, replace= TRUE))))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(unlist(sample(
df, 5, replace= TRUE))))
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(sample(
df, 5, replace= TRUE)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(df))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(table(df))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(df)
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(df)
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(sample(
select(df, popularity, budget, revenue), 5)
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(sample(
select(df, popularity, budget, revenue), 5))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(sample(
select(df, popularity, budget, revenue), 5, replace= TRUE))
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(sample(
select(df, popularity, budget, revenue, rating), 5, replace= TRUE))
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(sample(
select(df, budget, revenue, rating), 5, replace= TRUE))
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(sample(
select(df, budget, revenue, rating), [, 5]))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(sample(5,
select(df, budget, revenue, rating)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(sample(5,
select(df, budget, revenue, rating))
my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
my_table <- as.data.frame(sample(5,
select(df, budget, revenue, rating)))
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
sample(select(df, budget, revenue, rating), 5)
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
sample(select(df, budget, revenue, rating, popularity, vote_count), 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
#my_table <- as.data.frame(sample(5,
# select(df, budget, revenue, rating)))
#my_table
# df <- select(df, popularity, budget, revenue, runtime, rating)
#df <- sample(df, 5)
sample(select(df, budget, revenue, rating, popularity, vote_count), 5)
#df <- melt(df)
#df <- data.table(df)
#df[,value_rescaled:=value/mean(value),by=.(var)]
#my_table <- as.data.frame(sample(5,
# select(df, budget, revenue, rating)))
#my_table
my_table <- as.data.frame(sample(5,
select(df, budget, revenue, rating, popularity, vote_count)))
my_table <- as.data.frame(sample(5,
select(df, budget, revenue, rating, popularity, vote_count)))
my_table <- as.data.frame(sample(
select(df, budget, revenue, rating, popularity, vote_count), 5))
my_table
my_table <- as.data.frame(sample(
select(df, budget, revenue, rating, popularity, vote_count), 5))
ggplot(my_table, aes(x=revenue))+
geom_bar(y = budget)
my_table <- as.data.frame(sample(
select(df, budget, revenue, rating, popularity, vote_count), 5))
ggplot(my_table, aes(x=revenue))+
geom_bar(y = Freq)
my_table <- as.data.frame(sample(
select(df, budget, revenue, rating, popularity, vote_count), 5))
ggplot(my_table, aes(x=revenue))+
geom_bar(y = popularity)
my_table <- as.data.frame(sample(
select(df, budget, revenue, rating, popularity, vote_count), 5))
ggplot(data = my_table, aes(x = factor(column.names), y = factor(rownames(my_table)))) +
geom_tile(aes(fill = value), color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Heatmap of my_table Data") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
my_table <- as.data.frame(sample(
select(df, budget, revenue, rating, popularity, vote_count), 5))
ggplot(data = my_table, aes(x = factor(column.names), y = factor(rownames(my_table)))) +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Heatmap of my_table Data") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
my_table <- as.data.frame(sample(
select(df, budget, revenue, rating, popularity, vote_count), 5))
ggplot(data = my_table, aes(x = factor(column.names), y = factor(rownames(my_table)))) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Heatmap of my_table Data") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
my_table <- as.data.frame(sample(
select(df, budget, revenue, rating, popularity, vote_count), 5))
ggplot(data = reshape2::melt(my_table), aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Heatmap of my_table Data") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
table <- as.data.frame(sample(
select(df, budget, revenue, rating, popularity, vote_count), 5))
table
library(ggplot2)
library(dplyr)
cm <- colorRampPalette(c(COLORS[1]))(256)
df <- read.csv('data/tmdb_movies_data.csv')
df <- df %>% select(-overview, -keywords, -genres, -production_companies, -tagline, -cast)
df_sample <- df %>% sample_n(5)
df_sample <- df_sample %>% mutate_all(as.character)
df_sample <- df_sample %>% mutate_all(as.numeric)
df_sample <- df_sample %>% mutate_all(as.factor)
df_sample <- df_sample %>% mutate_all(as.Date)
library(ggplot2)
library(dplyr)
cm <- colorRampPalette(c(COLORS[1]))(256)
df <- read.csv('data/tmdb_movies_data.csv')
df <- df %>% select(-overview, -keywords, -genres, -production_companies, -tagline, -cast)
df_sample <- df %>% sample_n(5)
df_sample <- df_sample %>% mutate_all(as.character)
df_sample <- df_sample %>% mutate_all(as.numeric)
df_sample <- df_sample %>% mutate_all(as.factor)
df_sample <- df_sample %>% mutate_all(as.POSIXct)
library(ggplot2)
library(dplyr)
cm <- colorRampPalette(c(COLORS[1]))(256)
df <- read.csv('data/tmdb_movies_data.csv')
df <- df %>% select(-overview, -keywords, -genres, -production_companies, -tagline, -cast)
df_sample <- df %>% sample_n(5)
df_sample <- df_sample %>% mutate_all(as.character)
df_sample <- df_sample %>% mutate_all(as.numeric)
df_sample <- df_sample %>% mutate_all(as.factor)
df_sample <- df_sample %>% mutate_all(as.POSIXlt)
library(ggplot2)
library(dplyr)
cm <- colorRampPalette(c(COLORS[1]))(256)
df <- read.csv('data/tmdb_movies_data.csv')
df <- df %>% select(-overview, -keywords, -genres, -production_companies, -tagline, -cast)
df_sample <- df %>% sample_n(5)
df_sample <- df_sample %>% mutate_all(as.character)
df_sample <- df_sample %>% mutate_all(as.numeric)
df_sample <- df_sample %>% mutate_all(as.factor)
df_sample <- df_sample %>% mutate_all(as.POSIXlt)
library(ggplot2)
library(dplyr)
cm <- colorRampPalette(c(COLORS[1]))(256)
df <- read.csv('data/tmdb_movies_data.csv')
df <- df %>% select(-overview, -keywords, -genres, -production_companies, -tagline, -cast)
df_sample <- df %>% sample_n(5)
df_sample <- df_sample %>% mutate_all(as.character)
df_sample <- df_sample %>% mutate_all(as.numeric)
df_sample <- df_sample %>% mutate_all(as.factor)
df_sample <- df_sample
library(ggplot2)
library(dplyr)
cm <- colorRampPalette(c(COLORS[1]))(256)
df <- read.csv('data/tmdb_movies_data.csv')
df <- df %>% select(-overview, -keywords, -genres, -production_companies, -tagline, -cast)
df_sample <- df %>% sample_n(5)
df_sample <- df_sample %>% mutate_all(as.character)
df_sample <- df_sample %>% mutate_all(as.numeric)
df_sample <- df_sample %>% mutate_all(as.factor)
df_sample
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
library(shiny)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
reticulate::repl_python()
import keras
install.packages("reticulate")
install.packages("reticulate")
nn_model             = keras.models.load_model('../models/nn-model.h5')
View(r)
install.packages("reticulate")
import keras
import joblib
import sklearn
import polars as pl
import pandas as pd
import numpy as np
import shiny.experimental as sh
from shiny import App, ui, render
COLORS  = ['#102542', '#F87060', '#CDD7D6', '#B3A394', '#FFFFFF']
COLUMNS = ['Gender', 'Married', 'Education',
'Property_Area', 'Monthly_Income',
'Extra_Monthly_Income', 'Loan_Term',
'Credit_History', 'Loan_Status',
'Dependents', 'Employment_Type',
'Loan_Amount', 'Total_Monthly_Income']
df = pd.read_csv('../data-cleaning/cleaned-data/processsed-data.csv')
# ===============================================================================
# >>>>>>>>>>>>>>>>>>>> Loading the models & data preparing <<<<<<<<<<<<<<<<<<<<<<
reticulate::repl_python()
import keras
import joblib
import keras
import sklearn
import polars as pl
import pandas as pd
import numpy as np
import shiny.experimental as sh
COLORS  = ['#102542', '#F87060', '#CDD7D6', '#B3A394', '#FFFFFF']
COLUMNS = ['Gender', 'Married', 'Education',
'Property_Area', 'Monthly_Income',
'Extra_Monthly_Income', 'Loan_Term',
'Credit_History', 'Loan_Status',
'Dependents', 'Employment_Type',
'Loan_Amount', 'Total_Monthly_Income']
df = pd.read_csv('../data-cleaning/cleaned-data/processsed-data.csv')
COLUMNS = ['Gender', 'Married', 'Education',
'Property_Area', 'Monthly_Income',
'Extra_Monthly_Income', 'Loan_Term',
'Credit_History', 'Loan_Status',
'Dependents', 'Employment_Type',
'Loan_Amount', 'Total_Monthly_Income']
df = pd.read_csv('../data-cleaning/cleaned-data/processsed-data.csv')
# ===============================================================================
df = pd.read_csv('data-cleaning/cleaned-data/processsed-data.csv')
os.getcwd()
setwd("C:/Users/Muhammad/Documents/Data science projects/Loan-prediction-project")
